/** \file msgQ
  * \author Jared R. Males (jaredmales@gmail.com)
  * \brief Declarations for the mxlib c++ message queue facility
  * \ingroup IPC_msgq
  * \ingroup IPC
  * 
*/

#ifndef __mx_msgQ__
#define __mx_msgQ__

#include "msgq.h"

/** \addtogroup IPC_msgq
  * @{
  */

///Class wrapper for the \ref msgq structure
class msgQ : protected msgq
{
   void initialize();
   
public:

   msgQ();
   
   ///Constructor specifying the shared memory key
   /** 
     * \param path  is the path to use in constructing the shared memory key with ftok
     * \param id is the id to use in constructing the shared memory key with ftok
     * 
     */   
   msgQ(const std::string & path, const int &id);

   ///Specify the shared memory key
   /** 
     * \param path  is the path to use in constructing the shared memory key with ftok
     * \param id is the id to use in constructing the shared memory key with ftok
     * 
     */
   key_t set_key(const std::string &path, const int & id);

   void set_listen_type(const long & t);
   
   int connect(int msgflag = MX_MSGQ_CREAT);

   template<typename msgT>
   int send(const msgT & msg, size_t msgsz, int msgflag=0);

   template<typename msgT>
   size_t receive(msgT & msg, int msgflag=0);
   
};

void msgQ::initialize()
{
   msgq_initialize(this);
}

msgQ::msgQ()
{
   initialize();
}

msgQ::msgQ(const std::string & path, const int & id)
{
   initialize();
   set_key(path, id);
}

key_t msgQ::set_key(const std::string &path, const int & id)
{
   return msgq_set_key(this, path.c_str(), id);
}
   
void msgQ::set_listen_type(const long &t)
{
   msgq_set_listen_type(this, t);
}

int msgQ::connect(int msgflag)
{
   return msgq_connect(this, msgflag);
}

template<typename msgT>
int msgQ::send(const msgT & msg, size_t msgsz, int msgflag)
{   
   return msgq_send(this, (const void *) &msg, msgsz, msgflag);
}

template<typename msgT>
size_t msgQ::receive(msgT & msg, int msgflag)
{
   long type = (long) *( (long *) &msg); //the first field of msgT must be a long containing the type.
   
   return msgq_receive(this, (void *) &msg, sizeof(msgT), msgflag);   
}

/// @}

#endif //__mx_msgQ__
