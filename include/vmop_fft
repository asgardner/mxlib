
#ifndef __mx_vmop_fft__
#define __mx_vmop_fft__


#include <fftw3.h>

namespace mx
{

template<class inT, class outT>
fftw_plan vmop_fftw_plan_simple(size_t N, inT * in, outT* out, int dir)
{
   std::cerr << "Must specialize the 1D fft plan\n";
}

template<class inT, class outT>
fftw_plan vmop_fftw_plan_simple(size_t N1, size_t N2, inT * in, outT* out, int dir)
{
   fftw_plan p;
   std::cerr << "Must specialize the 2D fft plan\n";
   return p;
}


template<>
fftw_plan vmop_fftw_plan_simple<double, std::complex<double> >( size_t n0, 
                                                                size_t n1, 
                                                                double * in, 
                                                                std::complex<double> * out, 
                                                                int dir
                                                              )
{
   fftw_plan p = fftw_plan_dft_r2c_2d(n0, n1, in, reinterpret_cast<fftw_complex*>(out),  FFTW_ESTIMATE);
   
   return p;
}

template<>
fftw_plan vmop_fftw_plan_simple<std::complex<double>, std::complex<double> >( size_t n0, 
                                                                              size_t n1, 
                                                                              std::complex<double> * in, 
                                                                              std::complex<double> * out, 
                                                                              int dir
                                                                             )
{
   fftw_plan p = fftw_plan_dft_2d(n0, n1, reinterpret_cast<fftw_complex*>(in), reinterpret_cast<fftw_complex*>(out), dir, FFTW_ESTIMATE);
   
   return p;
}

template<class vmopMMatrix_in, class vmopMMatrix_out> 
void fft( vmopMMatrix_in & m_in, vmopMMatrix_out & m_out, int dir=-1)
{
   fftw_plan p = vmop_fftw_plan_simple(m_in.size(0), m_in.size(1), m_in.get_data(), m_out.get_data(), dir);
   
   fftw_execute(p);
   
   fftw_destroy_plan(p);
}




}//namespace mx

#endif // __mx_vmopfft__

