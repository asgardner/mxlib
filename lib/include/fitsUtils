/** \file fitsUtils
  * \brief Declares and defines utilities to work with FITS files
  * \ingroup image_processing
  * \author Jared R. Males (jaredmales@gmail.com)
  *
  */
  
#ifndef __fitsUtils__
#define __fitsUtils__


#include "fitsio.h"

namespace mx
{

/** \addtogroup image_processing
  * @{
  */

/** Return the cfitsio constant for a given data type.
  *
  * \tparam scalarT is the type 
  * \returns a constant define in cfitsio corresponding to the native type
  * \retval -1 if not a define type in cfitsio
  */
template<typename scalarT> int getFitsType()
{
   return -1;
}

template<> int getFitsType<unsigned char>()
{
   return TBYTE;
}

template<> int getFitsType<signed char>()
{
   return TSBYTE;
}

template<> int getFitsType<short>()
{
   return TSHORT;
}

template<> int getFitsType<unsigned short>()
{
   return TUSHORT;
}

template<> int getFitsType<int>()
{
   return TINT;
}

template<> int getFitsType<long>()
{
   return TLONG;
}

template<> int getFitsType<long long>()
{
   return TLONGLONG;
}

template<> int getFitsType<unsigned long>()
{
   return TULONG;
}

template<> int getFitsType<float>()
{
   return TFLOAT;
}

template<> int getFitsType<double>()
{
   return TDOUBLE;
}

/** Return the cfitsio BITPIX value for a given data type.
  *
  * \tparam scalarT is the type 
  * \returns a constant defined in cfitsio corresponding to the native type
  * \retval -1 if not a define type in cfitsio
  */
template<typename scalarT> int getFitsBITPIX()
{
   return -1;
}

template<> int getFitsBITPIX<unsigned char>()
{
   return BYTE_IMG;
}

template<> int getFitsBITPIX<char>()
{
   return SBYTE_IMG;
}

template<> int getFitsBITPIX<short>()
{
   return SHORT_IMG;
}

template<> int getFitsBITPIX<unsigned short>()
{
   return USHORT_IMG;
}

template<> int getFitsBITPIX<long>()
{
   return LONG_IMG;
}

template<> int getFitsBITPIX<unsigned long>()
{
   return ULONG_IMG;
}

template<> int getFitsBITPIX<long long>()
{
   return LONGLONG_IMG;
}

template<> int getFitsBITPIX<float>()
{
   return FLOAT_IMG;
}

template<> int getFitsBITPIX<double>()
{
   return DOUBLE_IMG;
}

///@}

} //namespace mx

#endif //__fitsUtils__

