#ifndef __mx_MMatrix__
#define __mx_MMatrix__

#include <iostream>
#include <cstdarg>
#include <cmath>
#include <complex>



#include "MMatrixBase"

#include "MMatrixView"

#include "MMatrixSlice"

namespace mx
{


///The General Matrix Class
/** \ingroup mmatrix
  * See the typedefs.
  */
template<class dataT, size_t _dim, class absT> 
class MMatrix : public MMatrixBase<dataT, _dim, absT>
{

public:
   /** @name Construction and Destruction
     */
   //@{
   
   ///Default constructor. Initializes the non-array members but does not allocate storage.
   MMatrix() : MMatrixBase<dataT, _dim, absT>()
   {
   }
   
   ///Construct and allocate the data array with the size of each dimension specified in an array.
   /** 
     * \param sizes is an array of length _dim specifying the size of each dimension
     */
   explicit MMatrix(const size_t *sizes) : MMatrixBase<dataT, _dim, absT>(sizes)
   {
   }
      
   ///Construct and allocate the data array with the size of each dimension specified.
   /** 
     * \param size0..size_dim-1) are the sizes of each dimension.  Must be dim-1 dimensions specified.
     */  
   //explicit MMatrix( size_t size0, 
   //                      ...);
      
   ///Copy constructor, can be a deep (default) or shallow copy.
   MMatrix( const MMatrixBase<dataT, _dim, absT> & m, 
            bool deep = true) : MMatrixBase<dataT, _dim, absT>(m, deep)
   {
   }

   ///Move constructor.
   MMatrix(const MMatrix && m) : MMatrixBase<dataT, _dim, absT>( (MMatrix &&) m )
   {
   }

   ///Destructor.  If owned, the _data storage is freed.
   virtual ~MMatrix()
   {
   }

   //@}

   virtual MMatrixSlice<_dim-1, dataT, _dim, absT> operator()(size_t start, size_t stride, size_t end)
   {
      MMatrixSlice<_dim-1, dataT, _dim, absT> s(this, start, stride, end);
      
      return s;
   }
   
   virtual MMatrixSlice<_dim-1, dataT, _dim, absT> operator()(size_t start, size_t end)
   {
      MMatrixSlice<_dim-1, dataT, _dim, absT> s(this, start, 1, end);
      
      return s;
   }
   
   virtual MMatrixSlice<_dim-1, dataT, _dim, absT> operator()(size_t d)
   {
      MMatrixSlice<_dim-1, dataT, _dim, absT> s(this, d, 1, d+1);
      
      return s;
   }

};

} //namespace mx

#endif //__mx_MMatrix__




