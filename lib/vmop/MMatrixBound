/** \file MMatrixBound
  * \brief Declares and defines the BEG, FIRST, LAST, and END types.
  *
  * \author Jared R. Males (jaredmales@gmail.com)
  *
  */

#ifndef __mx_MMatrixBound__
#define __mx_MMatrixBound__

namespace mx
{

/// A dummy empty type, serving as a shortcut for "first element", i.e. 0
struct MMatrixBound_BEG
{};

/// A dummy empty type, serving as a shortcut for "last element", i.e. _length - 1
struct MMatrixBound_LAST
{};

/// A dummy tempty type, serving as a shortcut for "end", i.e. _length
struct MMatrixBound_END
{};

/** \defgroup boundaries Index Boundary Tags
  * \brief The dimension boundary tags
  * \details These instantiations of empty types can be passed to the row/column/slice operators to access the 
  * first and last elements. Example:
  * \code
  * mx::Vectord new_vec = old_vec(mx::BEG,2, mx::END) //Assign the elements of old_vec to new_vec, 
  *                                                   //from beginning to end (length - 1), with a stride (step size) of 2.
  * \endcode
  *  \ingroup vmop
  */
//@{
static MMatrixBound_BEG BEG; ///<Pass this to an operator to get the first element. 
static MMatrixBound_BEG FIRST; ///<Pass this to an operator to get the first element
static MMatrixBound_LAST LAST; ///<Pass this to an operator to get the last element
static MMatrixBound_END END; ///<Pass this to an operator to get one past the last elements
//@}

} //namespace mx

#endif //__mx_MMatrixBound__
